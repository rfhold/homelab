---
alwaysApply: false
description: "Specifies Pulumi-specific patterns for component resources, Helm chart integration, adapter patterns, and type safety. Applies to all Pulumi infrastructure code including components, adapters, modules, and stacks."
---
# Pulumi Homelab Rules

## General Pulumi Patterns
- Use `pulumi.interpolate\`${variable}-suffix\`` for template strings where pulumi.Inputs are used
- Use `pulumi.jsonStringify({ ... })` for JSON serialization
- Use `pulumi.all([...]).apply(...)` for combining multiple outputs
- Import Pulumi packages with `* as` pattern: `import * as pulumi from "@pulumi/pulumi"`

## Component Resource Patterns
- Extend `pulumi.ComponentResource` for all custom components
- Use resource type pattern: `"homelab:components:ComponentName"` 
- Class names should be PascalCase (e.g., `MetalLb`, `CertManager`)
- Configuration interfaces should use `ComponentArgs` suffix
- File names should be kebab-case (e.g., `cert-manager.ts`)
- Always accept `pulumi.ComponentResourceOptions` as optional parameter
- Set `{ parent: this }` on all child resources
- Call `this.registerOutputs()` with key resources at the end
- Use `pulumi.interpolate\`${name}-resource-type\`` for resource naming

## Helm Chart Integration
- Reference chart configs via `HELM_CHARTS.COMPONENT_NAME` from `../helm-charts.ts`
- Use `createHelmChartArgs()` helper for OCI chart handling
- Structure chart options as: `{ ...createHelmChartArgs(chartConfig, namespace), values: { ... } }`
- Always use `k8s.helm.v4.Chart` for Helm deployments

## Adapter Patterns
- Provide minimal, focused configuration interfaces
- Use `pulumi.Input<T>` for all configuration parameters
- Create utility functions for common operations (passwords, connection strings, env vars)
- Return `pulumi.Output<T>` for utility functions that process inputs
- Use standard environment variable naming patterns

## Type Safety
- Use proper TypeScript types for all inputs and outputs
- Use `pulumi.Input<T>` for configuration interfaces
- Use `pulumi.Output<T>` for derived values
- Include JSDoc comments with usage examples