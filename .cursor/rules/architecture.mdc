---
alwaysApply: false
description: "Defines the overall project structure, design philosophy, and architectural patterns for the homelab infrastructure codebase. Covers adapter design, component organization, module composition, documentation standards, and coding conventions."
---

# Homelab Architecture Rules

## Project Structure
- `src/adapters/` - Infrastructure connection interfaces and utilities
- `src/components/` - Pulumi ComponentResource classes for infrastructure
- `src/modules/` - Higher-level abstractions combining components
- `stacks/` - Pulumi micro-stacks for specific functionality
- `deploys/` - PyInfra deployment scripts for server configuration

## Adapter Design Philosophy
- Adapters describe how applications connect to services, not service configuration
- Provide minimal, focused configuration interfaces (avoid extraValues patterns)
- Use simple `createPVCSpec()` approach for storage adapters
- Include utility functions for common operations (passwords, connection strings, env vars)
- Use connection-safe password generation with proper character exclusions

## Component Design Philosophy
- Each component represents a single logical infrastructure unit
- Use minimal configuration - only expose commonly needed options
- Provide sensible defaults for optional parameters
- Follow the 80/20 rule - cover 80% of use cases with simple config
- Avoid overly complex components that manage unrelated resources

## Module Design Philosophy
- Modules provide higher-level abstractions that combine multiple components
- They enable implementation switching through enum-based configuration
- Focus on composition over configuration - orchestrate existing components
- Provide unified interfaces that abstract implementation differences
- Design for evolution - start with single implementation enums, expand later
- Expose underlying component resources for advanced use cases
- Map module-level configuration to component-level configuration
- Maintain separation of concerns between modules and components

## Documentation Standards
- Update README.md files when adding new components, modules, or adapters
- Include JSDoc comments with usage examples
- Document configuration interfaces thoroughly
- Provide architecture diagrams where helpful

## Import Patterns
- Use `* as` imports for major packages: `import * as pulumi from "@pulumi/pulumi"`
- Use relative imports for project modules: `import { Component } from "../components/component"`
- Group imports: external packages first, then internal modules

## Configuration Management
- Use TypeScript interfaces for all configuration
- Use `pulumi.Input<T>` for Pulumi-based configurations
- Provide type-safe defaults where appropriate
- Validate required configuration with clear error messages

## Resource Naming
- Use consistent naming patterns across resources
- Use `pulumi.interpolate` for dynamic names
- Follow kebab-case for file names
- Use PascalCase for class names
- Use descriptive names that indicate purpose
